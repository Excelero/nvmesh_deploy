---

## Ensures that the intended CONFIGURED_NICS are all Up, fails if they aren't; skips if node is also in nvmesh_client
- name: Verify that Configured Network Interfaces are Active
  assert:
    that:
    - "hostvars[inventory_hostname]['ansible_' + item]['active']"
    fail_msg: "{{ item }} of type {{ hostvars[inventory_hostname]['ansible_' + item]['type'] }} is not active"
    success_msg: "{{ item }} of type {{ hostvars[inventory_hostname]['ansible_' + item]['type'] }} is active"
  loop: "{{ nvmesh_configured_nics }}"
  when: "'nvmesh_client' not in group_names"

## Transform the nvmesh_configured_nics list to a semicolon-separated string
- name: Build CONFIGURED_NICS list
  set_fact:
    nvmesh_cfg_nics_string: "{{ nvmesh_cfg_nics_string }}{{ (index > 0)|ternary(';','') }}{{ item }}"
  loop: "{{ nvmesh_configured_nics }}"
  loop_control:
    index_var: index
  when: "'nvmesh_client' not in group_names"

## Assemble the full CONFIGURED_NICS line to inject / replace in /etc/opt/NVMesh/nvmesh.conf
- name: Concatenate CONFIGURED_NICS String for nvmesh.conf
  set_fact:
    nvmesh_configured_nics_string: "{{ 'CONFIGURED_NICS=\"' }}{{ nvmesh_cfg_nics_string }}{{ '\"' }}"
  when: "'nvmesh_client' not in group_names"

## Build TCP_ENABLED line, if requested
- name: Determine if TCP_ENABLED should be Yes
  set_fact:
    nvmesh_enable_tcp: 'TCP_ENABLED="Yes"'
  when: nvmesh_tcp_enabled == "Yes" and 'nvmesh_client' not in group_names

## Take a backup of nvmesh.conf, then Inject / Replace the CONFIGURED_NICS line
- name: Add CONFIGURED_NICS String to nvmesh.conf
  lineinfile:
    path: /etc/opt/NVMesh/nvmesh.conf
    backup: Yes
    regexp: '^CONFIGURED_NICS='
    insertafter: '^#\sCONFIGURED_NICS='
    line: "{{ nvmesh_configured_nics_string }}"
  when: "'nvmesh_client' not in group_names"

## Inject / Replace TCP_ENABLED line in /etc/opt/NVMesh/nvmesh.conf, if it needs to be set to Yes
- name: Add TCP_ENABLED to nvmesh.conf, if necessary
  lineinfile:
    path: /etc/opt/NVMesh/nvmesh.conf
    regexp: '^TCP_ENABLED='
    insertafter: '^#\sTCP_ENABLED='
    line: "{{ nvmesh_enable_tcp }}"
  when: nvmesh_enable_tcp is defined and 'nvmesh_client' not in group_names

## Set IPV4_ONLY to Yes in /etc/opt/NVMesh/nvmesh.conf, if TCP is enabled
- name: Add IPV4_ONLY to nvmesh.conf, if TCP TCP_ENABLED
  lineinfile:
    path: /etc/opt/NVMesh/nvmesh.conf
    regexp: '^IPV$_ONLY='
    insertafter: '^#\sIPV4_ONLY='
    line: 'IPV4_ONLY="Yes"'
  when: nvmesh_enable_tcp is defined and 'nvmesh_client' not in group_names

## Use the nvmesh_management group to build list of host1:4001,host2:4001...
- name: Build MANAGEMENT_SERVERS list
  set_fact:
    nvmesh_management_server_list: "{{ nvmesh_management_server_list }} + [ '{{ item }}'+':4001' ]"
  loop: "{{ groups.nvmesh_management }}"
  when: "'nvmesh_client' not in group_names"

## Convert the MANAGEMENT_SERVERS list to a comma-separated string
- name: Convert MANAGEMENT_SERVERS list to string
  set_fact:
    nvmesh_management_server_string: "{{ nvmesh_management_server_string }}{{ (index > 0)|ternary(',','') }}{{ item }}"
  loop: "{{ nvmesh_management_server_list }}"
  loop_control:
    index_var: index
  when: "'nvmesh_client' not in group_names"

## Inject / Replace MANAGEMENT_SERVERS in /etc/opt/NVMesh/nvmesh.conf
- name: Add MANAGEMENT_SERVERS to nvmesh.conf
  lineinfile:
    path: /etc/opt/NVMesh/nvmesh.conf
    regexp: '^MANAGEMENT_SERVERS='
    insertafter: '^#\sMANAGEMENT_SERVERS='
    line: "{{ 'MANAGEMENT_SERVERS=\"' }}{{ nvmesh_management_server_string }}{{ '\"' }}"
  when: "'nvmesh_client' not in group_names"

## Get Installed CPU type from facts
- name: Set processor fact if Intel
  set_fact:
    installed_cpu_type: "Intel"
  when: '"GenuineIntel" in ansible_processor'

- name: Set processor fact if AMD
  set_fact:
    installed_cpu_type: "AMD"
  when: '"AuthenticAMD" in ansible_processor'

## Inject MLX5_RDDA_ENABLED="No" if the installed CPU is AMD; take a backup as earlier modifications may have been skipped
## if the node is also in the nvmesh_client group
- name: Disable RDDA for AMD-based systems
  lineinfile:
    backup: Yes
    path: /etc/opt/NVMesh/nvmesh.conf
    regexp: '^MLX5_RDDA_ENABLED='
    insertafter: "EOF"
    line: 'MLX5_RDDA_ENABLED="No"'
  when: installed_cpu_type == "AMD"

